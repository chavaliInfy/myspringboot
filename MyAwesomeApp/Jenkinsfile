pipeline {

  agent any
  
 parameters {
	choice(name: 'action', choices: 'create\nrollback', description: 'Create/rollback of the deployment')
 //   string(name: 'ImageName', description: "Name of the docker build")
//	string(name: 'ImageTag', description: "Name of the docker build")
	string(name: 'AppName', description: "Name of the Application")
  //  string(name: 'docker_repo', description: "Name of docker repository")
  }
      
  tools{ 
        maven 'maven'
    }
    stages {
        stage('checkout') {
        steps {
            git 'https://github.com/chavaliInfy/myspringboot.git'
        }
    }
    stage('Build Maven'){
            when {
				expression { params.action == 'create' }
			}
    		steps {
        		dir("${params.AppName}") {
        			sh 'mvn -f /var/lib/jenkins/workspace/jenkinsfile-eks/MyAwesomeApp/pom.xml clean package'
        		//	sh 'mvn clean package'
        		}
    		}
	    }
	/*	stage ('Docker Build') {
        steps{
            script{
     // Build and push image with Jenkins' docker-plugin
    
        withDockerRegistry([credentialsId: "dockerhub", url: "https://index.docker.io/v1/"]) {
        image = docker.build("prasad459/myspringbootapp", "MyAwesomeApp")
        image.push()    
        }
      
            }
        }
    } */
	    
	    stage("Build Docker Image")
        {
         steps
          {
           script{
            def buildNumber= BUILD_NUMBER   
          //  sh "docker build -t ecr-dev-repo-jenkins-eks/java-web-app:${buildNumber} ."
		   
            sh "docker build -t ecr-dev-repo-jenkins-eks/javaspringboot-web-app:latest /var/lib/jenkins/workspace/jenkinsfile-eks/MyAwesomeApp/Dockerfile"
           }
          }
        }
         stage("ECR login")
        {
         steps
          {
          script
          {      
           withCredentials([aws(accessKeyVariable: 'AWS_ACCESS_KEY_ID', credentialsId: 'cred-dev-ecr-jenkins-eks-new', secretKeyVariable: 'AWS_SECRET_ACCESS_KEY')]) 
        // docker.withRegistry("https://955470930558.dkr.ecr.us-east-2.amazonaws.com", "ecr:us-east-2:cred-dev-ecr-jenkins-eks-new")
          {
           sh 'docker tag ecr-dev-repo-jenkins-eks/javaspringboot-web-app:latest 955470930558.dkr.ecr.us-east-2.amazonaws.com/ecr-dev-repo-jenkins-eks:latest'
           sh 'aws ecr get-login-password --region us-east-2 | docker login --username AWS --password-stdin 955470930558.dkr.ecr.us-east-2.amazonaws.com/ecr-dev-repo-jenkins-eks'
           sh 'docker push 955470930558.dkr.ecr.us-east-2.amazonaws.com/ecr-dev-repo-jenkins-eks:latest'
            
          }    
          }
              
          }
        }
	    
     stage("Create deployment") {
			when {
				expression { params.action == 'create' }
			}
	        steps {
	            dir("${params.AppName}") {
	                withCredentials([[$class: 'AmazonWebServicesCredentialsBinding', 
	                        accessKeyVariable: 'AWS_ACCESS_KEY_ID', 
	                        credentialsId: 'AWS_Credentials', 
	                        secretKeyVariable: 'AWS_SECRET_ACCESS_KEY']]) {
	                    withCredentials([kubeconfigFile(credentialsId: 'K8S', 
	                        variable: 'KUBECONFIG')]) {
	                        sh 'kubectl create -f /var/lib/jenkins/workspace/springboot-app/MyAwesomeApp/springBootDeploy.yml'
	                    }
	                }
	            }
	        }
	    }
	
        
	}	
}
